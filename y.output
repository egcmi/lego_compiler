Terminals unused in grammar

   SHOW
   IF
   THEN
   ELSE
   AND
   OR
   EQ
   '>'
   '<'


Grammar

    0 $accept: line $end

    1 line: expr '\n'
    2     | expr line

    3 expr: GRID NUM NUM
    4     | VAR '=' types
    5     | PLACE VAR AT coo
    6     | MOVE VAR mopt
    7     | HEIGHT hopt
    8     | DELETE dopt
    9     | FITS VAR coo

   10 types: matrix
   11      | array
   12      | pyramid
   13      | dome

   14 matrix: MATRIX NUM NUM

   15 array: ARRAY NUM

   16 dome: DOME NUM NUM

   17 pyramid: PYRAMID NUM NUM

   18 mopt: DIR NUM
   19     | AT coo

   20 hopt: coo
   21     | VAR

   22 dopt: VAR
   23     | ALL
   24     | GRID

   25 coo: '(' NUM ',' NUM ')'


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 1
'(' (40) 25
')' (41) 25
',' (44) 25
'<' (60)
'=' (61) 4
'>' (62)
error (256)
NUM (258) 3 14 15 16 17 18 25
DIR (259) 18
SHOW (260)
MATRIX (261) 14
ARRAY (262) 15
PYRAMID (263) 17
DOME (264) 16
GRID (265) 3 24
HEIGHT (266) 7
FITS (267) 9
PLACE (268) 5
DELETE (269) 8
ALL (270) 23
IF (271)
THEN (272)
ELSE (273)
MOVE (274) 6
AND (275)
OR (276)
EQ (277)
AT (278) 5 19
VAR (279) 4 5 6 9 21 22


Nonterminals, with rules where they appear

$accept (32)
    on left: 0
line (33)
    on left: 1 2, on right: 0 2
expr (34)
    on left: 3 4 5 6 7 8 9, on right: 1 2
types (35)
    on left: 10 11 12 13, on right: 4
matrix (36)
    on left: 14, on right: 10
array (37)
    on left: 15, on right: 11
dome (38)
    on left: 16, on right: 13
pyramid (39)
    on left: 17, on right: 12
mopt (40)
    on left: 18 19, on right: 6
hopt (41)
    on left: 20 21, on right: 7
dopt (42)
    on left: 22 23 24, on right: 8
coo (43)
    on left: 25, on right: 5 9 19 20


State 0

    0 $accept: . line $end

    GRID    shift, and go to state 1
    HEIGHT  shift, and go to state 2
    FITS    shift, and go to state 3
    PLACE   shift, and go to state 4
    DELETE  shift, and go to state 5
    MOVE    shift, and go to state 6
    VAR     shift, and go to state 7

    line  go to state 8
    expr  go to state 9


State 1

    3 expr: GRID . NUM NUM

    NUM  shift, and go to state 10


State 2

    7 expr: HEIGHT . hopt

    VAR  shift, and go to state 11
    '('  shift, and go to state 12

    hopt  go to state 13
    coo   go to state 14


State 3

    9 expr: FITS . VAR coo

    VAR  shift, and go to state 15


State 4

    5 expr: PLACE . VAR AT coo

    VAR  shift, and go to state 16


State 5

    8 expr: DELETE . dopt

    GRID  shift, and go to state 17
    ALL   shift, and go to state 18
    VAR   shift, and go to state 19

    dopt  go to state 20


State 6

    6 expr: MOVE . VAR mopt

    VAR  shift, and go to state 21


State 7

    4 expr: VAR . '=' types

    '='  shift, and go to state 22


State 8

    0 $accept: line . $end

    $end  shift, and go to state 23


State 9

    1 line: expr . '\n'
    2     | expr . line

    GRID    shift, and go to state 1
    HEIGHT  shift, and go to state 2
    FITS    shift, and go to state 3
    PLACE   shift, and go to state 4
    DELETE  shift, and go to state 5
    MOVE    shift, and go to state 6
    VAR     shift, and go to state 7
    '\n'    shift, and go to state 24

    line  go to state 25
    expr  go to state 9


State 10

    3 expr: GRID NUM . NUM

    NUM  shift, and go to state 26


State 11

   21 hopt: VAR .

    $default  reduce using rule 21 (hopt)


State 12

   25 coo: '(' . NUM ',' NUM ')'

    NUM  shift, and go to state 27


State 13

    7 expr: HEIGHT hopt .

    $default  reduce using rule 7 (expr)


State 14

   20 hopt: coo .

    $default  reduce using rule 20 (hopt)


State 15

    9 expr: FITS VAR . coo

    '('  shift, and go to state 12

    coo  go to state 28


State 16

    5 expr: PLACE VAR . AT coo

    AT  shift, and go to state 29


State 17

   24 dopt: GRID .

    $default  reduce using rule 24 (dopt)


State 18

   23 dopt: ALL .

    $default  reduce using rule 23 (dopt)


State 19

   22 dopt: VAR .

    $default  reduce using rule 22 (dopt)


State 20

    8 expr: DELETE dopt .

    $default  reduce using rule 8 (expr)


State 21

    6 expr: MOVE VAR . mopt

    DIR  shift, and go to state 30
    AT   shift, and go to state 31

    mopt  go to state 32


State 22

    4 expr: VAR '=' . types

    MATRIX   shift, and go to state 33
    ARRAY    shift, and go to state 34
    PYRAMID  shift, and go to state 35
    DOME     shift, and go to state 36

    types    go to state 37
    matrix   go to state 38
    array    go to state 39
    dome     go to state 40
    pyramid  go to state 41


State 23

    0 $accept: line $end .

    $default  accept


State 24

    1 line: expr '\n' .

    $default  reduce using rule 1 (line)


State 25

    2 line: expr line .

    $default  reduce using rule 2 (line)


State 26

    3 expr: GRID NUM NUM .

    $default  reduce using rule 3 (expr)


State 27

   25 coo: '(' NUM . ',' NUM ')'

    ','  shift, and go to state 42


State 28

    9 expr: FITS VAR coo .

    $default  reduce using rule 9 (expr)


State 29

    5 expr: PLACE VAR AT . coo

    '('  shift, and go to state 12

    coo  go to state 43


State 30

   18 mopt: DIR . NUM

    NUM  shift, and go to state 44


State 31

   19 mopt: AT . coo

    '('  shift, and go to state 12

    coo  go to state 45


State 32

    6 expr: MOVE VAR mopt .

    $default  reduce using rule 6 (expr)


State 33

   14 matrix: MATRIX . NUM NUM

    NUM  shift, and go to state 46


State 34

   15 array: ARRAY . NUM

    NUM  shift, and go to state 47


State 35

   17 pyramid: PYRAMID . NUM NUM

    NUM  shift, and go to state 48


State 36

   16 dome: DOME . NUM NUM

    NUM  shift, and go to state 49


State 37

    4 expr: VAR '=' types .

    $default  reduce using rule 4 (expr)


State 38

   10 types: matrix .

    $default  reduce using rule 10 (types)


State 39

   11 types: array .

    $default  reduce using rule 11 (types)


State 40

   13 types: dome .

    $default  reduce using rule 13 (types)


State 41

   12 types: pyramid .

    $default  reduce using rule 12 (types)


State 42

   25 coo: '(' NUM ',' . NUM ')'

    NUM  shift, and go to state 50


State 43

    5 expr: PLACE VAR AT coo .

    $default  reduce using rule 5 (expr)


State 44

   18 mopt: DIR NUM .

    $default  reduce using rule 18 (mopt)


State 45

   19 mopt: AT coo .

    $default  reduce using rule 19 (mopt)


State 46

   14 matrix: MATRIX NUM . NUM

    NUM  shift, and go to state 51


State 47

   15 array: ARRAY NUM .

    $default  reduce using rule 15 (array)


State 48

   17 pyramid: PYRAMID NUM . NUM

    NUM  shift, and go to state 52


State 49

   16 dome: DOME NUM . NUM

    NUM  shift, and go to state 53


State 50

   25 coo: '(' NUM ',' NUM . ')'

    ')'  shift, and go to state 54


State 51

   14 matrix: MATRIX NUM NUM .

    $default  reduce using rule 14 (matrix)


State 52

   17 pyramid: PYRAMID NUM NUM .

    $default  reduce using rule 17 (pyramid)


State 53

   16 dome: DOME NUM NUM .

    $default  reduce using rule 16 (dome)


State 54

   25 coo: '(' NUM ',' NUM ')' .

    $default  reduce using rule 25 (coo)
