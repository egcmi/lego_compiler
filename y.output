Terminals unused in grammar

   SHOW
   ARRAY
   IF
   THEN
   ELSE
   AND
   OR
   EQ
   '>'
   '<'


Grammar

    0 $accept: line $end

    1 line: expr '\n'
    2     | expr line

    3 expr: EXIT
    4     | SWITCH GRID VAR
    5     | VAR '=' GRID '(' NUM ',' NUM ')'
    6     | VAR '=' type '(' NUM ',' NUM ')'
    7     | PLACE VAR AT '(' NUM ',' NUM ')'
    8     | MOVE mopt
    9     | HEIGHT hopt
   10     | DELETE dopt
   11     | FITS VAR '(' NUM ',' NUM ')'

   12 type: MATRIX
   13     | DOME
   14     | PYRAMID

   15 mopt: VAR DIR NUM
   16     | VAR AT '(' NUM ',' NUM ')'

   17 hopt: '(' NUM ',' NUM ')'
   18     | VAR

   19 dopt: VAR
   20     | ALL
   21     | GRID VAR


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 1
'(' (40) 5 6 7 11 16 17
')' (41) 5 6 7 11 16 17
',' (44) 5 6 7 11 16 17
'<' (60)
'=' (61) 5 6
'>' (62)
error (256)
NUM (258) 5 6 7 11 15 16 17
DIR (259) 15
SHOW (260)
EXIT (261) 3
SWITCH (262) 4
MATRIX (263) 12
ARRAY (264)
PYRAMID (265) 14
DOME (266) 13
GRID (267) 4 5 21
HEIGHT (268) 9
FITS (269) 11
PLACE (270) 7
DELETE (271) 10
ALL (272) 20
IF (273)
THEN (274)
ELSE (275)
MOVE (276) 8
AND (277)
OR (278)
EQ (279)
AT (280) 7 16
VAR (281) 4 5 6 7 11 15 16 18 19 21


Nonterminals, with rules where they appear

$accept (34)
    on left: 0
line (35)
    on left: 1 2, on right: 0 2
expr (36)
    on left: 3 4 5 6 7 8 9 10 11, on right: 1 2
type (37)
    on left: 12 13 14, on right: 6
mopt (38)
    on left: 15 16, on right: 8
hopt (39)
    on left: 17 18, on right: 9
dopt (40)
    on left: 19 20 21, on right: 10


State 0

    0 $accept: . line $end

    EXIT    shift, and go to state 1
    SWITCH  shift, and go to state 2
    HEIGHT  shift, and go to state 3
    FITS    shift, and go to state 4
    PLACE   shift, and go to state 5
    DELETE  shift, and go to state 6
    MOVE    shift, and go to state 7
    VAR     shift, and go to state 8

    line  go to state 9
    expr  go to state 10


State 1

    3 expr: EXIT .

    $default  reduce using rule 3 (expr)


State 2

    4 expr: SWITCH . GRID VAR

    GRID  shift, and go to state 11


State 3

    9 expr: HEIGHT . hopt

    VAR  shift, and go to state 12
    '('  shift, and go to state 13

    hopt  go to state 14


State 4

   11 expr: FITS . VAR '(' NUM ',' NUM ')'

    VAR  shift, and go to state 15


State 5

    7 expr: PLACE . VAR AT '(' NUM ',' NUM ')'

    VAR  shift, and go to state 16


State 6

   10 expr: DELETE . dopt

    GRID  shift, and go to state 17
    ALL   shift, and go to state 18
    VAR   shift, and go to state 19

    dopt  go to state 20


State 7

    8 expr: MOVE . mopt

    VAR  shift, and go to state 21

    mopt  go to state 22


State 8

    5 expr: VAR . '=' GRID '(' NUM ',' NUM ')'
    6     | VAR . '=' type '(' NUM ',' NUM ')'

    '='  shift, and go to state 23


State 9

    0 $accept: line . $end

    $end  shift, and go to state 24


State 10

    1 line: expr . '\n'
    2     | expr . line

    EXIT    shift, and go to state 1
    SWITCH  shift, and go to state 2
    HEIGHT  shift, and go to state 3
    FITS    shift, and go to state 4
    PLACE   shift, and go to state 5
    DELETE  shift, and go to state 6
    MOVE    shift, and go to state 7
    VAR     shift, and go to state 8
    '\n'    shift, and go to state 25

    line  go to state 26
    expr  go to state 10


State 11

    4 expr: SWITCH GRID . VAR

    VAR  shift, and go to state 27


State 12

   18 hopt: VAR .

    $default  reduce using rule 18 (hopt)


State 13

   17 hopt: '(' . NUM ',' NUM ')'

    NUM  shift, and go to state 28


State 14

    9 expr: HEIGHT hopt .

    $default  reduce using rule 9 (expr)


State 15

   11 expr: FITS VAR . '(' NUM ',' NUM ')'

    '('  shift, and go to state 29


State 16

    7 expr: PLACE VAR . AT '(' NUM ',' NUM ')'

    AT  shift, and go to state 30


State 17

   21 dopt: GRID . VAR

    VAR  shift, and go to state 31


State 18

   20 dopt: ALL .

    $default  reduce using rule 20 (dopt)


State 19

   19 dopt: VAR .

    $default  reduce using rule 19 (dopt)


State 20

   10 expr: DELETE dopt .

    $default  reduce using rule 10 (expr)


State 21

   15 mopt: VAR . DIR NUM
   16     | VAR . AT '(' NUM ',' NUM ')'

    DIR  shift, and go to state 32
    AT   shift, and go to state 33


State 22

    8 expr: MOVE mopt .

    $default  reduce using rule 8 (expr)


State 23

    5 expr: VAR '=' . GRID '(' NUM ',' NUM ')'
    6     | VAR '=' . type '(' NUM ',' NUM ')'

    MATRIX   shift, and go to state 34
    PYRAMID  shift, and go to state 35
    DOME     shift, and go to state 36
    GRID     shift, and go to state 37

    type  go to state 38


State 24

    0 $accept: line $end .

    $default  accept


State 25

    1 line: expr '\n' .

    $default  reduce using rule 1 (line)


State 26

    2 line: expr line .

    $default  reduce using rule 2 (line)


State 27

    4 expr: SWITCH GRID VAR .

    $default  reduce using rule 4 (expr)


State 28

   17 hopt: '(' NUM . ',' NUM ')'

    ','  shift, and go to state 39


State 29

   11 expr: FITS VAR '(' . NUM ',' NUM ')'

    NUM  shift, and go to state 40


State 30

    7 expr: PLACE VAR AT . '(' NUM ',' NUM ')'

    '('  shift, and go to state 41


State 31

   21 dopt: GRID VAR .

    $default  reduce using rule 21 (dopt)


State 32

   15 mopt: VAR DIR . NUM

    NUM  shift, and go to state 42


State 33

   16 mopt: VAR AT . '(' NUM ',' NUM ')'

    '('  shift, and go to state 43


State 34

   12 type: MATRIX .

    $default  reduce using rule 12 (type)


State 35

   14 type: PYRAMID .

    $default  reduce using rule 14 (type)


State 36

   13 type: DOME .

    $default  reduce using rule 13 (type)


State 37

    5 expr: VAR '=' GRID . '(' NUM ',' NUM ')'

    '('  shift, and go to state 44


State 38

    6 expr: VAR '=' type . '(' NUM ',' NUM ')'

    '('  shift, and go to state 45


State 39

   17 hopt: '(' NUM ',' . NUM ')'

    NUM  shift, and go to state 46


State 40

   11 expr: FITS VAR '(' NUM . ',' NUM ')'

    ','  shift, and go to state 47


State 41

    7 expr: PLACE VAR AT '(' . NUM ',' NUM ')'

    NUM  shift, and go to state 48


State 42

   15 mopt: VAR DIR NUM .

    $default  reduce using rule 15 (mopt)


State 43

   16 mopt: VAR AT '(' . NUM ',' NUM ')'

    NUM  shift, and go to state 49


State 44

    5 expr: VAR '=' GRID '(' . NUM ',' NUM ')'

    NUM  shift, and go to state 50


State 45

    6 expr: VAR '=' type '(' . NUM ',' NUM ')'

    NUM  shift, and go to state 51


State 46

   17 hopt: '(' NUM ',' NUM . ')'

    ')'  shift, and go to state 52


State 47

   11 expr: FITS VAR '(' NUM ',' . NUM ')'

    NUM  shift, and go to state 53


State 48

    7 expr: PLACE VAR AT '(' NUM . ',' NUM ')'

    ','  shift, and go to state 54


State 49

   16 mopt: VAR AT '(' NUM . ',' NUM ')'

    ','  shift, and go to state 55


State 50

    5 expr: VAR '=' GRID '(' NUM . ',' NUM ')'

    ','  shift, and go to state 56


State 51

    6 expr: VAR '=' type '(' NUM . ',' NUM ')'

    ','  shift, and go to state 57


State 52

   17 hopt: '(' NUM ',' NUM ')' .

    $default  reduce using rule 17 (hopt)


State 53

   11 expr: FITS VAR '(' NUM ',' NUM . ')'

    ')'  shift, and go to state 58


State 54

    7 expr: PLACE VAR AT '(' NUM ',' . NUM ')'

    NUM  shift, and go to state 59


State 55

   16 mopt: VAR AT '(' NUM ',' . NUM ')'

    NUM  shift, and go to state 60


State 56

    5 expr: VAR '=' GRID '(' NUM ',' . NUM ')'

    NUM  shift, and go to state 61


State 57

    6 expr: VAR '=' type '(' NUM ',' . NUM ')'

    NUM  shift, and go to state 62


State 58

   11 expr: FITS VAR '(' NUM ',' NUM ')' .

    $default  reduce using rule 11 (expr)


State 59

    7 expr: PLACE VAR AT '(' NUM ',' NUM . ')'

    ')'  shift, and go to state 63


State 60

   16 mopt: VAR AT '(' NUM ',' NUM . ')'

    ')'  shift, and go to state 64


State 61

    5 expr: VAR '=' GRID '(' NUM ',' NUM . ')'

    ')'  shift, and go to state 65


State 62

    6 expr: VAR '=' type '(' NUM ',' NUM . ')'

    ')'  shift, and go to state 66


State 63

    7 expr: PLACE VAR AT '(' NUM ',' NUM ')' .

    $default  reduce using rule 7 (expr)


State 64

   16 mopt: VAR AT '(' NUM ',' NUM ')' .

    $default  reduce using rule 16 (mopt)


State 65

    5 expr: VAR '=' GRID '(' NUM ',' NUM ')' .

    $default  reduce using rule 5 (expr)


State 66

    6 expr: VAR '=' type '(' NUM ',' NUM ')' .

    $default  reduce using rule 6 (expr)
